import { MoreVideoDetails } from 'ytdl-core';

interface DownloaderOptions {
    outputDir?: string;
    getTags?: boolean;
    verifyTags?: boolean;
}
declare class Downloader {
    static defaultDownloadsDir: string;
    outputDir: string;
    getTags: boolean;
    verifyTags: boolean;
    constructor({ outputDir, getTags, verifyTags }: DownloaderOptions);
    downloadSong(url: string): Promise<string>;
    /** Returns the content from the video as a buffer */
    private downloadVideo;
    /** Returns the absolute path to the audio file to be downloaded */
    private getOutputFile;
}

declare class FormatConverter {
    private readonly ffmpegBinary;
    constructor();
    videoToAudio(videoData: Buffer, outputFile: string): void;
}

interface SearchResult {
    artistName: string;
    trackName: string;
    artworkUrl100: string;
}
interface SearchData {
    resultCount: number;
    results: SearchResult[];
}
interface AlbumArt {
    mime: string;
    type: {
        id: number;
        name: string;
    };
    description: string;
    imageBuffer: Buffer;
}
interface SongTags {
    title: string;
    artist: string;
    image: AlbumArt;
}
declare class SongTagsSearch {
    private searchTerm;
    private url;
    constructor(videoDetails: MoreVideoDetails);
    search(verify?: boolean): Promise<SongTags>;
    private fetchResults;
    private getVerifiedResult;
    private fetchAlbumArt;
}

declare class YtdlMp3Error extends Error {
    constructor(message: string, options?: ErrorOptions);
}

export { AlbumArt, Downloader, DownloaderOptions, FormatConverter, SearchData, SearchResult, SongTags, SongTagsSearch, YtdlMp3Error };
